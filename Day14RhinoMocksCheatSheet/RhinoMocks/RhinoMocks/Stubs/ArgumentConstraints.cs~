// <copyright file="ArgumentConstraints.cs" company="Fluffy Teq">
//    Copyright (c) 2013 . All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

namespace RhinoMocksExample.Stubs
{
    using System;
    using NUnit.Framework;
    using Rhino.Mocks;
    using RhinoMocksExample.Model;

    [TestFixture]
    public class ArgumentConstraints
    {
        [Test]
        public void IsAnything()
        {
            var sut = MockRepository.GenerateStub<ISimpleModel>();
            sut.Stub(x => x.TakesInt(Arg<int>.Is.Anything)).Return(1);
       
            Assert.That(sut.TakesInt(10).Equals(1));
            Assert.That(sut.TakesInt(-10).Equals(1));
        }

        [Test]
        public void IsEqualIsNotEqual()
        {
            var sut = MockRepository.GenerateStub<ISimpleModel>();
            sut.Stub(x => x.TakesInt(Arg<int>.Is.Equal(1))).Return(1);
            sut.Stub(x => x.TakesInt(Arg<int>.Is.NotEqual(1))).Return(10);
       
            Assert.That(sut.TakesInt(1).Equals(1));
            Assert.That(sut.TakesInt(-10).Equals(10));
        }

        [Test]
        public void IsNullIsNotNull()
        {
            var sut = MockRepository.GenerateStub<ISimpleModel>();
            sut.Stub(x => x.TakesFoo(Arg<Foo>.Is.Null)).Return(1);
            sut.Stub(x => x.TakesFoo(Arg<Foo>.Is.NotNull)).Return(2);
       
            Assert.That(sut.TakesFoo(null).Equals(1));
            Assert.That(sut.TakesFoo(new Foo()).Equals(2));
        }

        [Test]
        public void IsTypeOf()
        {
            var sut = MockRepository.GenerateStub<ISimpleModel>();
            sut.Stub(x => x.TakesFoo(Arg<Foo>.Is.Null)).Return(1);
            sut.Stub(x => x.TakesFoo(Arg<Foo>.Is.NotNull)).Return(2);
       
            Assert.That(sut.TakesFoo(null).Equals(1));
            Assert.That(sut.TakesFoo(new Foo()).Equals(2));
        }

        [Test]
        public void LessThanGreaterThan()
        {
            var sut = MockRepository.GenerateStub<ISimpleModel>();
            sut.Stub(x => x.TakesInt(Arg<int>.Is.LessThanOrEqual(10))).Return(1);
            sut.Stub(x => x.TakesInt(Arg<int>.Is.GreaterThan(10))).Return(2);

            Assert.That(sut.TakesInt(10).Equals(1));
            Assert.That(sut.TakesInt(11).Equals(2));
        }

        [Test]
        public void IsMatching()
        {
            var sut = MockRepository.GenerateStub<ISimpleModel>();
            sut.Stub(x => x.TakesInt(Arg<int>.Matches( y => y > 5 ))).Return(1);
            sut.Stub(x => x.TakesInt(Arg<int>.Matches( y => y <= 5 ))).Return(0);

            Assert.That(sut.TakesInt(4).Equals(0));
            Assert.That(sut.TakesInt(6).Equals(1));
        }

        [Test]
        public void IsSameNotSame()
        {
            var aFoo = new Foo();

            var sut = MockRepository.GenerateStub<ISimpleModel>();
            sut.Stub(x => x.TakesFoo(Arg<Foo>.Is.Same(aFoo))).Return(1);
            sut.Stub(x => x.TakesFoo(Arg<Foo>.Is.NotSame(aFoo))).Return(2);
                       
            Assert.That(sut.TakesFoo(aFoo).Equals(1));
            Assert.That(sut.TakesFoo(new Foo()).Equals(2));
        }       
    }
}